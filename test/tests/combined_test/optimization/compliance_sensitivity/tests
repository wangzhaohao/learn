[Tests]
  issues = '#25602'
  design = 'DensityUpdate.md DensityUpdateTwoConstraints.md'
  requirement = 'The system shall be able to compute the compliance sensitivty correctly for a '
  [2d_mbb]
    type = 'CSVDiff'
    input = '2d_mbb.i'
    csvdiff = '2d_mbb_out.csv'
    detail = '2D topology optimization problem.'
    heavy = true
  []
  [3d_mbb]
    type = 'CSVDiff'
    input = '3d_mbb.i'
    csvdiff = '3d_mbb_out.csv'
    detail = '3D topology optimization problem.'
    valgrind = 'none'
    method = opt
  []
  [2d_mbb_pde]
    type = 'CSVDiff'
    input = '2d_mbb_pde.i'
    csvdiff = '2d_mbb_pde_out.csv'
    detail = '2D topology optimization problem with a PDE filter.'
    heavy = true
  []
  [2d_mbb_pde_amr]
    type = 'CSVDiff'
    input = '2d_mbb_pde_amr.i'
    csvdiff = '2d_mbb_pde_amr_out.csv'
    detail = '2D topology optimization problem with AMR.'
    heavy = true
  []
  [2d_mmb_2material_cost_initial]
    type = 'CSVDiff'
    input = '2d_mmb_2material_cost_initial.i'
    csvdiff = '2d_mmb_2material_cost_initial_out.csv'
    requirement = 'The system shall be able to compute a multi-material topology optimization '
                  'problem.'
    heavy = true
  []
  [paper_three_materials_test]
    type = 'CSVDiff'
    input = 'paper_three_materials_test.i'
    csvdiff = 'paper_three_materials_test_out.csv'
    requirement = 'The system shall be able to compute a three-material topology optimization '
                  'mechanical complianceproblem and reproduce approximate results from the '
                  'literature.'
    heavy = true
    method = 'opt'
    valgrind = 'none'
  []
  [three_materials_thermal]
    type = 'CSVDiff'
    input = 'three_materials_thermal.i'
    csvdiff = 'three_materials_thermal_out.csv'
    requirement = 'The system shall be able to compute a three-material topology optimization '
                  'thermal complianceproblem and qualitatively reproduce results from the '
                  'literature.'
    heavy = true
    method = 'opt'
    valgrind = 'none'
  []
  [thermal_test]
    type = 'Exodiff'
    input = 'thermal_test.i'
    exodiff = 'thermal_test_out.e'
    requirement = 'The system shall be able to compute a thermal compliance minimization problem.'
  []
[]
